version: "3.5"

x-clickhouse-defaults: &clickhouse-defaults
  restart: on-failure
  image: clickhouse/clickhouse-server:23.11.1-alpine
  tty: true
  depends_on:
    - zookeeper-1
  logging:
    options:
      max-size: 50m
      max-file: "3"
  healthcheck:
    test:
      [
        "CMD",
        "wget",
        "--spider",
        "-q",
        "localhost:8123/ping"
      ]
    interval: 30s
    timeout: 5s
    retries: 3
  ulimits:
    nproc: 65535
    nofile:
      soft: 262144
      hard: 262144

x-db-depend: &db-depend
  depends_on:
    clickhouse:
      condition: service_healthy
    otel-collector-migrator:
      condition: service_completed_successfully
volumes:
  data_clickhouse:

services:  
  otel_collector:
    networks:
      - backend
    image: otel/opentelemetry-collector-contrib:${OTEL_IMAGE_TAG:-0.93.0}
    volumes:
      - ${OTEL_CONFIG_SRC:-./otel-collector-config-connector.yml}:/etc/otelcol/otel-collector-config.yml
    command: --config /etc/otelcol/otel-collector-config.yml
    ports:
    - "8888:8888"
    - "8889:8889"

  adminer_db:
    networks:
      - backend
    image: adminer:${ADMINER_DB_IMAGE_TAG:-latest}
    environment:
      ADMINER_DEFAULT_SERVER: order_db
    ports:
      - 7070:8080

  shop_apigateway:
    restart: on-failure
    networks:
      - backend
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel_collector:4317
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME:-rabbitmq_user}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-rabbitmq_password}
      - RABBITMQ_HOST=rabbitmq
    ports:
      - "8080:8080"
    image: shop.apigateway:${SHOP_APIGATEWAY_IMAGE_TAG:-latest}
    depends_on: 
      - otel_collector
      - order_service
      - product_service
      - email_service
      - rabbitmq
  email_service:
    networks:
      - backend
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel_collector:4317
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME:-rabbitmq_user}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-rabbitmq_password}
      - RABBITMQ_HOST=rabbitmq
    image: email.service:${EMAIL_SERVICE_IMAGE_TAG:-latest}
    depends_on: 
      - otel_collector
      - rabbitmq
  update_receptionist_service:
    networks:
      - backend
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel_collector:4317
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME:-rabbitmq_user}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-rabbitmq_password}
      - RABBITMQ_HOST=rabbitmq
    image: update_receptionist.service:${UPDATE_RECEPTIONIST_IMAGE_TAG:-latest}
    depends_on: 
      - otel_collector
      - rabbitmq
      - product_service
  product_service:
    image: product.service:${PRODUCT_SERVICE_IMAGE_TAG:-latest}
    networks:
      - backend
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel_collector:4317    
      - "DB_HOST=product_database"
      - "DB_HOST_PORT=5432"
      - DB_USER=${PRODUCT_DATABASE_USER:-product_database_user}
      - DB_PASS=${PRODUCT_DATABASE_PASSWORD:-product_database_password}
      - DB_DATABASE=${PRODUCT_DATABASE:-products} 
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME:-rabbitmq_user}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-rabbitmq_password}
      - RABBITMQ_HOST=rabbitmq
    ports:
      - "50051:50051"
    depends_on: 
      - otel_collector
      - rabbitmq
  product_database:
    restart: on-failure
    image: postgres:${POSTGRES_IMAGE_TAG:-16}
    networks:
      - backend
    environment:
      - POSTGRES_PASSWORD=${PRODUCT_DATABASE_PASSWORD:-product_database_password}
      - POSTGRES_USER=${PRODUCT_DATABASE_USER:-product_database_user}
      - POSTGRES_DB=${PRODUCT_DATABASE:-products}
    ports:
      - 5432:5432
    volumes:
      - ../../../src/ObservableShop/Product.Database/db.sql:/docker-entrypoint-initdb.d/init.sql
  payment_service:  
    restart: on-failure
    networks:
      - backend
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel_collector:4317      
    ports:
      - "8082:8080"
    image: payment.service:${PAYMENT_SERVICE_IMAGE_TAG:-latest}
    depends_on: 
      - otel_collector
  order_service:
    restart: on-failure
    networks:
      - backend
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel_collector:4317
      - "DB_ENDPOINT=order_db:3306"
      - DB_USER=${ORDER_DATABASE_USER:-order_db_user}
      - DB_PASS=${ORDER_DATABASE_PASSWORD:-order_db_password}
      - DB_DATABASE=${ORDER_DATABASE:-orders}
    ports:
      - "8081:8080"
    image: order.service:${ORDER_SERVICE_IMAGE_TAG:-latest}
    depends_on: 
      - otel_collector
      - order_db
  order_db:
    networks:
      - backend
    image: mysql:${ORDER_DB_IMAGE_TAG:-latest}
    ports:
      - 3306:3306
    environment:
      MYSQL_DATABASE: ${ORDER_DATABASE:-orders}
      MYSQL_USER: ${ORDER_DATABASE_USER:-order_db_user}
      MYSQL_PASSWORD: ${ORDER_DATABASE_PASSWORD:-order_db_password}
      MYSQL_ROOT_PASSWORD: ${ORDER_DATABASE_ROOT_PASSWORD:-order_db_rootpassword}
    volumes:
      - ../../../src/ObservableShop/Order.Database/db.sql:/docker-entrypoint-initdb.d/init.sql
  
  rabbitmq:
    networks:
      - backend
    image: rabbitmq:${RABBITMQ_IMAGE_TAG:-3.9-management}
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME:-rabbitmq_user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq_password}



  zookeeper-1:
      networks:
        - backend
      image: bitnami/zookeeper:3.7.1
      container_name: signoz-zookeeper-1
      hostname: zookeeper-1
      user: root
      ports:
        - "2181:2181"
        - "2888:2888"
        - "3888:3888"
      volumes:
        - ./data/zookeeper-1:/bitnami/zookeeper
      environment:
        - ZOO_SERVER_ID=1
        - ALLOW_ANONYMOUS_LOGIN=yes
        - ZOO_AUTOPURGE_INTERVAL=1

  clickhouse:
    <<: *clickhouse-defaults
    container_name: signoz-clickhouse
    networks:
      - backend
    hostname: clickhouse
    ports:
      - "9000:9000"
      - "8123:8123"
      - "9181:9181"
    volumes:
      - ./clickhouse-config.xml:/etc/clickhouse-server/config.xml
      - ./clickhouse-users.xml:/etc/clickhouse-server/users.xml
      - ./custom-function.xml:/etc/clickhouse-server/custom-function.xml
      - ./clickhouse-cluster.xml:/etc/clickhouse-server/config.d/cluster.xml
      - data_clickhouse:/var/lib/clickhouse/
      - ./user_scripts:/var/lib/clickhouse/user_scripts/

  alertmanager:
    networks:
      - backend
    image: signoz/alertmanager:${ALERTMANAGER_TAG:-0.23.4}
    container_name: signoz-alertmanager
    volumes:
      - ./data/alertmanager:/data
    depends_on:
      query-service:
        condition: service_healthy
    restart: on-failure
    command:
      - --queryService.url=http://query-service:8085
      - --storage.path=/data

  query-service:
    networks:
      - backend
    image: signoz/query-service:${DOCKER_TAG:-0.38.2}
    container_name: signoz-query-service
    command:
      [
        "-config=/root/config/prometheus.yml",
      ]
    volumes:
      - ./prometheus.yml:/root/config/prometheus.yml
      - ../dashboards:/root/config/dashboards
      - ./data/signoz/:/var/lib/signoz/
    environment:
      - ClickHouseUrl=tcp://clickhouse:9000/?database=signoz_traces
      - ALERTMANAGER_API_PREFIX=http://alertmanager:9093/api/
      - SIGNOZ_LOCAL_DB_PATH=/var/lib/signoz/signoz.db
      - DASHBOARDS_PATH=/root/config/dashboards
      - STORAGE=clickhouse
      - GODEBUG=netdns=go
      - TELEMETRY_ENABLED=true
      - DEPLOYMENT_TYPE=docker-standalone-amd
    restart: on-failure
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "-q",
          "localhost:8080/api/v1/health"
        ]
      interval: 30s
      timeout: 5s
      retries: 3
    <<: *db-depend

  frontend:
    networks:
      - backend
    image: signoz/frontend:${DOCKER_TAG:-0.38.2}
    container_name: signoz-frontend
    restart: on-failure
    depends_on:
      - alertmanager
      - query-service
    ports:
      - "3301:3301"
    volumes:
      - ../common/nginx-config.conf:/etc/nginx/conf.d/default.conf

  otel-collector-migrator:
    networks:
      - backend
    image: signoz/signoz-schema-migrator:${OTELCOL_TAG:-0.88.11}
    container_name: otel-migrator
    command:
      - "--dsn=tcp://clickhouse:9000"
    depends_on:
      clickhouse:
        condition: service_healthy

  signoz-collector:
    networks:
      - backend
    image: signoz/signoz-otel-collector:${OTELCOL_TAG:-0.88.11}
    container_name: signoz-otel-collector
    command:
      [
        "--config=/etc/otel-collector-config.yaml",
        "--manager-config=/etc/manager-config.yaml",
        "--copy-path=/var/tmp/collector-config.yaml",
        "--feature-gates=-pkg.translator.prometheus.NormalizeName"
      ]
    user: root 
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
      - ./otel-collector-opamp-config.yaml:/etc/manager-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=host.name=signoz-host,os.type=linux
      - DOCKER_MULTI_NODE_CLUSTER=false
      - LOW_CARDINAL_EXCEPTION_GROUPING=false
    ports:
      # - "1777:1777"     # pprof extension
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
      # - "8888:8888"     # OtelCollector internal metrics
      # - "8889:8889"     # signoz spanmetrics exposed by the agent
      # - "9411:9411"     # Zipkin port
      # - "13133:13133"   # health check extension
      # - "14250:14250"   # Jaeger gRPC
      # - "14268:14268"   # Jaeger thrift HTTP
      # - "55678:55678"   # OpenCensus receiver
      # - "55679:55679"   # zPages extension
    restart: on-failure
    depends_on:
      clickhouse:
        condition: service_healthy
      otel-collector-migrator:
        condition: service_completed_successfully
      query-service:
        condition: service_healthy

  logspout:
    networks:
      - backend
    image: "gliderlabs/logspout:v3.2.14"
    container_name: signoz-logspout
    volumes:
      - /etc/hostname:/etc/host_hostname:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: syslog+tcp://signoz-collector:2255
    depends_on:
      - signoz-collector
    restart: on-failure

networks:
  backend:
